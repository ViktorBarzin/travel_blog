user  nginx;
worker_processes  10;

error_log  /var/log/nginx/error.log warn;
pid        /var/run/nginx.pid;

events {
    worker_connections  1024;
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    # limit_req_zone $binary_remote_addr zone=mylimit:10m rate=2r/s;
    # Log proxy address if one
    #log_format main '$http_x_forwarded_for - $remote_addr -  $remote_user [$time_local] '
	log_format main '$remote_addr - $remote_user [$time_local] $request $status $body_bytes_sent $http_referer $http_user_agent';

    access_log  /var/log/nginx/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    keepalive_timeout  65;

    #gzip  on;

    # don't send the nginx version number in error pages and Server header
    server_tokens off;
    more_set_headers 'Server: less';

    # config to enable HSTS(HTTP Strict Transport Security) https://developer.mozilla.org/en-US/docs/Security/HTTP_Strict_Transport_Security
    # to avoid ssl stripping https://en.wikipedia.org/wiki/SSL_stripping#SSL_stripping
    # also https://hstspreload.org/
    add_header Strict-Transport-Security "max-age=31536000; includeSubdomains; preload";

    add_header Referrer-Policy "no-referrer-when-downgrade";

    # config to don't allow the browser to render the page inside an frame or iframe
    # and avoid clickjacking http://en.wikipedia.org/wiki/Clickjacking
    # if you need to allow [i]frames, you can use SAMEORIGIN or even set an uri with ALLOW-FROM uri
    # https://developer.mozilla.org/en-US/docs/HTTP/X-Frame-Options
    add_header X-Frame-Options SAMEORIGIN;

    # This header enables the Cross-site scripting (XSS) filter built into most recent web browsers.
    # It's usually enabled by default anyway, so the role of this header is to re-enable the filter for
    # this particular website if it was disabled by the user.
    # https://www.owasp.org/index.php/List_of_useful_HTTP_headers
    add_header X-XSS-Protection "1; mode=block";

    # X-Content-Type-Options stops a browser from trying to MIME-sniff the content type and forces it to stick with the declared content-type. The only valid value for this header is "X-Content-Type-Options: nosniff".
    add_header X-Content-Type-Options "nosniff" always;

    #add_header Feature-Policy "geolocation none;midi none;notifications none;push none;sync-xhr none;microphone none;camera none;magnetometer none;gyroscope none;speaker self;vibrate none;fullscreen self;payment none;";
    add_header Feature-Policy "geolocation 'none';midi 'none';sync-xhr 'none';microphone 'none';camera 'none';magnetometer 'none';gyroscope 'none';speaker 'none';fullscreen 'none';payment 'none';";

    # /donate breakes for google ads
    #add_header Content-Security-Policy "script-src 'self' 'nonce-2726c7f26v' 'sha256-yfaygvSe0Qd87FZBMVziH0SWhTtpJCZkKIRUO2oiX9I=' 'sha256-7vWo61O6x1krMhP326o1+t7OOikYdSD/z/e1mgj7/Ac=' 'sha256-mQcbTIdy0NnJqQGlpe1QUdS3WoY/BRil2t9CpP7peec=' 'unsafe-eval' code.jquery.com maxcdn.bootstrapcdn.com instant.page www.google-analytics.com/analytics.js disqus.com *.disqus.com c.disquscdn.com pagead2.googlesyndication.com adservice.google.com adservice.google.bg www.googletagservices.com; img-src 'self' scontent.fsof3-1.fna.fbcdn.net github.com raw.githubusercontent.com www.google-analytics.com c.disquscdn.com stats.g.doubleclick.net referrer.disqus.com pagead2.googlesyndication.com; style-src 'unsafe-inline' 'self' maxcdn.bootstrapcdn.com fonts.googleapis.com c.disquscdn.com; frame-src 'self' disqus.com googleads.g.doubleclick.net; object-src 'none';";

    # unsafe-inline and unsafe-eval to make everything work. fix later... (google ads mainly)
    # add_header Content-Security-Policy "script-src 'self' 'unsafe-eval' 'unsafe-inline' tpc.googlesyndication.com code.jquery.com maxcdn.bootstrapcdn.com instant.page www.googletagmanager.com www.google-analytics.com disqus.com *.disqus.com c.disquscdn.com pagead2.googlesyndication.com adservice.google.com adservice.google.bg www.googletagservices.com assets.calendly.com adservice.google.co.uk cdn.viglink.com partner.googleadservices.com; img-src 'self' assets.calendly.com scontent.fsof3-1.fna.fbcdn.net github.com raw.githubusercontent.com www.google-analytics.com c.disquscdn.com stats.g.doubleclick.net referrer.disqus.com pagead2.googlesyndication.com cdn.viglink.com *.disqus.com; style-src 'unsafe-inline' 'self' maxcdn.bootstrapcdn.com fonts.googleapis.com c.disquscdn.com assets.calendly.com; frame-src 'self' tpc.googlesyndication.com disqus.com googleads.g.doubleclick.net calendly.com; object-src 'self';";

    # server {
    #     server_name  viktorbarzin.me;
    #     listen 443 ssl http2;

    #     # limit_req zone=mylimit burst=20;
    #     # limit_req_status 444;

    #     #charset koi8-r;
    #     access_log  /var/log/nginx/access.log  main;

    #     # Redirect all traffic in /.well-known/ to letsencrypt
    #     location ~ ^/\.well-known/* {
    #         proxy_pass http://letsencrypt.letsencrypt-renew;
    #     }

    #     location / {
    #         # root   /usr/share/nginx/html;
    #         root   /var/www/html;
    #         index  index.html index.htm;
    #     }

    #     location ~*  \.(jpg|jpeg|png|gif|ico|css|js)$ {
    #     root   /var/www/html;
    #     expires 365d;
    #     }

    #     error_page  404              /404.html;

    #     # redirect server error pages to the static page /50x.html
    #     #
    #     error_page   500 502 503 504  /50x.html;
    #     location = /50x.html {
    #         root   /usr/share/nginx/html;
    #     }

    #     ssl_certificate /etc/letsencrypt/live/viktorbarzin.me/fullchain.pem; # managed by Certbot
    #     ssl_certificate_key /etc/letsencrypt/live/viktorbarzin.me/privkey.pem; # managed by Certbot
    # }

    server {
        # error_page  404              /404.html;
        # error_page  301              /301.html;

        # # limit_req zone=mylimit burst=20;
        # # limit_req_status 444;

        # location / {
        #     error_page  301              /301.html;
        #     return 301 https://$host$request_uri;
        # }

        # location /301.html {
        #     root /usr/share/nginx/html/;
        # }

        # if ($host = viktorbarzin.me) {
        #     return 301 https://$host$request_uri;
        # } # managed by Certbot


        listen       80;
        server_name  travel.viktorbarzin.me;
        #return 405; # managed by Certbot

        #charset koi8-r;
        access_log  /var/log/nginx/access.log  main;

        # Redirect all traffic in /.well-known/ to letsencrypt
        #location ~ ^/\.well-known/* {
        #    proxy_pass http://letsencrypt.letsencrypt-renew;
        #}

        location / {
            # root   /usr/share/nginx/html;
            root   /var/www/html;
            index  index.html index.htm;
        }

        location ~*  \.(jpg|jpeg|png|gif|ico|css|js)$ {
        root   /var/www/html;
        expires 365d;
        }

        error_page  404              /404.html;

        # redirect server error pages to the static page /50x.html
        #
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   /usr/share/nginx/html;
        }

        # ssl_certificate /etc/letsencrypt/live/viktorbarzin.me/fullchain.pem; # managed by Certbot
        # ssl_certificate_key /etc/letsencrypt/live/viktorbarzin.me/privkey.pem; # managed by Certbot
    }
    server {
        listen 127.0.0.1:8080;
        server_name 127.0.0.1;

        location /nginx_status {
            stub_status;
        }
    }
}
